type token =
  | INT of (int)
  | BOOL of (bool)
  | ADD
  | MUL
  | SUB
  | DIV
  | LPAREN
  | RPAREN
  | TRUE
  | FALSE
  | AND
  | OR
  | NOT
  | GREATER
  | LESSER
  | EQUAL
  | IF
  | THEN
  | ELSE
  | ELIF
  | EOF

open Parsing;;
let _ = parse_error;;
let yytransl_const = [|
  259 (* ADD *);
  260 (* MUL *);
  261 (* SUB *);
  262 (* DIV *);
  263 (* LPAREN *);
  264 (* RPAREN *);
  265 (* TRUE *);
  266 (* FALSE *);
  267 (* AND *);
  268 (* OR *);
  269 (* NOT *);
  270 (* GREATER *);
  271 (* LESSER *);
  272 (* EQUAL *);
  273 (* IF *);
  274 (* THEN *);
  275 (* ELSE *);
  276 (* ELIF *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* BOOL *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\003\000\003\000\003\000\004\000\
\004\000\004\000\004\000\004\000\008\000\008\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\006\000\
\007\000\007\000\007\000\007\000\000\000"

let yylen = "\002\000\
\002\000\003\000\003\000\001\000\003\000\003\000\001\000\001\000\
\002\000\003\000\001\000\006\000\001\000\006\000\001\000\001\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\001\000\
\001\000\001\000\002\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\008\000\000\000\000\000\015\000\016\000\000\000\
\000\000\029\000\000\000\000\000\007\000\000\000\000\000\000\000\
\000\000\000\000\000\000\025\000\026\000\000\000\017\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
\000\000\000\000\010\000\018\000\000\000\027\000\000\000\000\000\
\000\000\000\000\000\000\000\000\005\000\006\000\019\000\024\000\
\020\000\028\000\000\000\000\000\000\000\000\000\000\000\000\000\
\012\000\000\000\000\000\012\000"

let yydgoto = "\002\000\
\010\000\015\000\012\000\013\000\014\000\047\000\048\000\053\000"

let yysindex = "\019\000\
\012\255\000\000\000\000\012\255\012\255\000\000\000\000\070\255\
\012\255\000\000\122\000\255\254\000\000\080\255\060\255\000\000\
\056\255\076\255\012\255\000\000\000\000\070\255\000\000\252\254\
\012\255\012\255\012\255\012\255\012\255\000\000\012\255\012\255\
\070\255\070\255\000\000\000\000\078\255\000\000\040\255\255\254\
\255\254\060\255\060\255\060\255\000\000\000\000\000\000\000\000\
\000\000\000\000\012\255\060\255\004\255\055\255\040\255\040\255\
\000\000\011\255\040\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\018\000\000\000\035\000\000\000\001\000\
\000\000\028\255\000\000\000\000\000\000\000\000\000\000\028\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\028\255\000\000\000\000\052\000\
\069\000\085\000\094\000\103\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\112\000\000\000\028\255\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\255\255\014\000\005\000\253\255\012\000\002\000\212\255"

let yytablesize = 394
let yytable = "\011\000\
\009\000\018\000\031\000\017\000\032\000\024\000\033\000\034\000\
\016\000\023\000\057\000\058\000\003\000\039\000\060\000\037\000\
\004\000\004\000\005\000\001\000\006\000\007\000\055\000\038\000\
\008\000\042\000\043\000\044\000\009\000\059\000\011\000\011\000\
\011\000\011\000\011\000\045\000\046\000\052\000\040\000\041\000\
\003\000\011\000\011\000\011\000\004\000\049\000\005\000\054\000\
\006\000\007\000\000\000\002\000\008\000\052\000\052\000\000\000\
\051\000\052\000\025\000\000\000\026\000\000\000\025\000\035\000\
\026\000\033\000\034\000\000\000\003\000\027\000\028\000\029\000\
\056\000\027\000\028\000\029\000\019\000\000\000\020\000\021\000\
\000\000\000\000\022\000\036\000\021\000\050\000\033\000\034\000\
\033\000\034\000\033\000\034\000\000\000\022\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\023\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\030\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\007\000\007\000\007\000\007\000\000\000\
\009\000\000\000\000\000\009\000\009\000\000\000\007\000\007\000\
\007\000\000\000\009\000\009\000\004\000\000\000\004\000\000\000\
\000\000\004\000\000\000\000\000\004\000\004\000\000\000\004\000\
\004\000\004\000\000\000\004\000\004\000\011\000\011\000\011\000\
\011\000\000\000\011\000\000\000\000\000\000\000\000\000\000\000\
\011\000\011\000\011\000\000\000\011\000\011\000\002\000\000\000\
\002\000\000\000\000\000\002\000\000\000\000\000\002\000\002\000\
\000\000\002\000\002\000\002\000\000\000\002\000\002\000\003\000\
\000\000\003\000\000\000\000\000\003\000\000\000\000\000\003\000\
\003\000\000\000\003\000\003\000\003\000\000\000\003\000\003\000\
\021\000\000\000\021\000\000\000\021\000\000\000\000\000\021\000\
\021\000\022\000\000\000\022\000\000\000\022\000\021\000\021\000\
\022\000\022\000\023\000\000\000\023\000\000\000\023\000\022\000\
\022\000\023\000\023\000\013\000\000\000\013\000\000\000\013\000\
\023\000\023\000\013\000\013\000\025\000\000\000\026\000\000\000\
\000\000\013\000\013\000\000\000\000\000\000\000\000\000\027\000\
\028\000\029\000"

let yycheck = "\001\000\
\000\000\005\000\004\001\005\000\006\001\009\000\011\001\012\001\
\004\000\008\000\055\000\056\000\001\001\018\001\059\000\019\000\
\005\001\000\000\007\001\001\000\009\001\010\001\019\001\022\000\
\013\001\027\000\028\000\029\000\017\001\019\001\003\001\004\001\
\005\001\006\001\000\000\031\000\032\000\039\000\025\000\026\000\
\001\001\014\001\015\001\016\001\005\001\034\000\007\001\051\000\
\009\001\010\001\255\255\000\000\013\001\055\000\056\000\255\255\
\017\001\059\000\003\001\255\255\005\001\255\255\003\001\008\001\
\005\001\011\001\012\001\255\255\000\000\014\001\015\001\016\001\
\018\001\014\001\015\001\016\001\007\001\255\255\009\001\010\001\
\255\255\255\255\013\001\008\001\000\000\008\001\011\001\012\001\
\011\001\012\001\011\001\012\001\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\004\001\005\001\006\001\255\255\
\008\001\255\255\255\255\011\001\012\001\255\255\014\001\015\001\
\016\001\255\255\018\001\019\001\003\001\255\255\005\001\255\255\
\255\255\008\001\255\255\255\255\011\001\012\001\255\255\014\001\
\015\001\016\001\255\255\018\001\019\001\003\001\004\001\005\001\
\006\001\255\255\008\001\255\255\255\255\255\255\255\255\255\255\
\014\001\015\001\016\001\255\255\018\001\019\001\003\001\255\255\
\005\001\255\255\255\255\008\001\255\255\255\255\011\001\012\001\
\255\255\014\001\015\001\016\001\255\255\018\001\019\001\003\001\
\255\255\005\001\255\255\255\255\008\001\255\255\255\255\011\001\
\012\001\255\255\014\001\015\001\016\001\255\255\018\001\019\001\
\004\001\255\255\006\001\255\255\008\001\255\255\255\255\011\001\
\012\001\004\001\255\255\006\001\255\255\008\001\018\001\019\001\
\011\001\012\001\004\001\255\255\006\001\255\255\008\001\018\001\
\019\001\011\001\012\001\004\001\255\255\006\001\255\255\008\001\
\018\001\019\001\011\001\012\001\003\001\255\255\005\001\255\255\
\255\255\018\001\019\001\255\255\255\255\255\255\255\255\014\001\
\015\001\016\001"

let yynames_const = "\
  ADD\000\
  MUL\000\
  SUB\000\
  DIV\000\
  LPAREN\000\
  RPAREN\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  NOT\000\
  GREATER\000\
  LESSER\000\
  EQUAL\000\
  IF\000\
  THEN\000\
  ELSE\000\
  ELIF\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  BOOL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 22 "parser.mly"
    ( _1 )
# 241 "parser.ml"
               : int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 26 "parser.mly"
    ( _1 + _3 )
# 249 "parser.ml"
               : int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 28 "parser.mly"
    ( _1 - _3 )
# 257 "parser.ml"
               : int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 30 "parser.mly"
    ( _1 )
# 264 "parser.ml"
               : int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 34 "parser.mly"
    ( _1 * _3 )
# 272 "parser.ml"
               : int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 36 "parser.mly"
    ( _1 / _3 )
# 280 "parser.ml"
               : int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 38 "parser.mly"
    ( _1 )
# 287 "parser.ml"
               : int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 42 "parser.mly"
    ( _1 )
# 294 "parser.ml"
               : int))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 44 "parser.mly"
    ( -_2 )
# 301 "parser.ml"
               : int))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 46 "parser.mly"
    ( _2 )
# 308 "parser.ml"
               : int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 48 "parser.mly"
    ( if _1 then 1 else 0 )
# 315 "parser.ml"
               : int))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : bool) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'statement) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 50 "parser.mly"
    ( if _2 then _4 else _6 )
# 324 "parser.ml"
               : int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 54 "parser.mly"
    ( _1 )
# 331 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : bool) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'statement) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 56 "parser.mly"
    ( if _2 then _4 else _6 )
# 340 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
    ( true )
# 346 "parser.ml"
               : bool))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
    ( false )
# 352 "parser.ml"
               : bool))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 64 "parser.mly"
    ( not _2 )
# 359 "parser.ml"
               : bool))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : bool) in
    Obj.repr(
# 66 "parser.mly"
    ( _2 )
# 366 "parser.ml"
               : bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : bool) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 68 "parser.mly"
    ( _1 && _3 )
# 374 "parser.ml"
               : bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : bool) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 70 "parser.mly"
    ( _1 || _3 )
# 382 "parser.ml"
               : bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 72 "parser.mly"
    ( _1 > _3 )
# 390 "parser.ml"
               : bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 74 "parser.mly"
    ( _1 < _3 )
# 398 "parser.ml"
               : bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 76 "parser.mly"
    ( _1 = _3 )
# 406 "parser.ml"
               : bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 80 "parser.mly"
    ( _1 )
# 413 "parser.ml"
               : bool))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
    ( true )
# 419 "parser.ml"
               : bool))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
    ( false )
# 425 "parser.ml"
               : bool))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 88 "parser.mly"
    ( not _2 )
# 432 "parser.ml"
               : bool))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : bool) in
    Obj.repr(
# 90 "parser.mly"
    ( _2 )
# 439 "parser.ml"
               : bool))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : int)
