# 3 "lexer.mll"
 
  open Parser

# 6 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\233\255\234\255\000\000\001\000\239\255\240\255\015\000\
    \012\000\243\255\244\255\001\000\000\000\001\000\001\000\001\000\
    \001\000\003\000\250\255\251\255\252\255\253\255\254\255\255\255\
    \000\000\249\255\248\255\001\000\247\255\005\000\001\000\006\000\
    \246\255\009\000\236\255\001\000\005\000\020\000\245\255\242\255\
    \238\255\017\000\022\000\024\000\237\255\235\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\021\000\021\000\255\255\255\255\014\000\
    \021\000\255\255\255\255\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\002\000\000\000\000\000\255\255\255\255\000\000\000\000\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\255\255\000\000\255\255\255\255\255\255\
    \000\000\255\255\000\000\255\255\255\255\255\255\000\000\000\000\
    \000\000\255\255\255\255\255\255\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\023\000\023\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \023\000\000\000\000\000\000\000\000\000\000\000\016\000\025\000\
    \006\000\005\000\020\000\021\000\000\000\019\000\022\000\018\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\000\000\000\000\009\000\008\000\010\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\039\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\017\000\035\000\000\000\025\000\003\000\011\000\040\000\
    \029\000\004\000\033\000\032\000\041\000\036\000\013\000\015\000\
    \027\000\024\000\030\000\026\000\012\000\028\000\031\000\034\000\
    \037\000\038\000\043\000\045\000\014\000\026\000\044\000\000\000\
    \000\000\000\000\000\000\000\000\042\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000\016\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\000\000\000\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\008\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\011\000\255\255\024\000\000\000\000\000\004\000\
    \012\000\000\000\029\000\031\000\003\000\035\000\000\000\000\000\
    \013\000\017\000\012\000\015\000\000\000\027\000\030\000\033\000\
    \036\000\037\000\041\000\042\000\000\000\014\000\043\000\255\255\
    \255\255\255\255\255\255\255\255\041\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 9 "lexer.mll"
        ( token lexbuf )
# 124 "lexer.ml"

  | 1 ->
# 11 "lexer.mll"
        ( EOF )
# 129 "lexer.ml"

  | 2 ->
# 13 "lexer.mll"
        ( ADD )
# 134 "lexer.ml"

  | 3 ->
# 15 "lexer.mll"
        ( MUL )
# 139 "lexer.ml"

  | 4 ->
# 17 "lexer.mll"
        ( SUB )
# 144 "lexer.ml"

  | 5 ->
# 19 "lexer.mll"
        ( DIV )
# 149 "lexer.ml"

  | 6 ->
# 21 "lexer.mll"
        ( AND )
# 154 "lexer.ml"

  | 7 ->
# 23 "lexer.mll"
        ( OR )
# 159 "lexer.ml"

  | 8 ->
# 25 "lexer.mll"
        ( NOT )
# 164 "lexer.ml"

  | 9 ->
# 27 "lexer.mll"
        ( TRUE )
# 169 "lexer.ml"

  | 10 ->
# 29 "lexer.mll"
        ( FALSE )
# 174 "lexer.ml"

  | 11 ->
# 31 "lexer.mll"
        ( GREATER )
# 179 "lexer.ml"

  | 12 ->
# 33 "lexer.mll"
        ( LESSER )
# 184 "lexer.ml"

  | 13 ->
# 35 "lexer.mll"
        ( EQUAL )
# 189 "lexer.ml"

  | 14 ->
let
# 36 "lexer.mll"
                    lxm
# 195 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 37 "lexer.mll"
        ( INT(int_of_string lxm) )
# 199 "lexer.ml"

  | 15 ->
# 39 "lexer.mll"
        ( LPAREN )
# 204 "lexer.ml"

  | 16 ->
# 41 "lexer.mll"
        ( RPAREN )
# 209 "lexer.ml"

  | 17 ->
# 43 "lexer.mll"
        ( IF )
# 214 "lexer.ml"

  | 18 ->
# 45 "lexer.mll"
        ( ELIF )
# 219 "lexer.ml"

  | 19 ->
# 47 "lexer.mll"
        ( THEN )
# 224 "lexer.ml"

  | 20 ->
# 49 "lexer.mll"
        ( ELSE )
# 229 "lexer.ml"

  | 21 ->
let
# 50 "lexer.mll"
           c
# 235 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 51 "lexer.mll"
        ( failwith ("Unexpected character: " ^ Char.escaped c) )
# 239 "lexer.ml"

  | 22 ->
# 53 "lexer.mll"
        ( EOF )
# 244 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

